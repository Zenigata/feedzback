orbs:
  common: okode/common@2.0.13
  node: circleci/node@4 # the node orb provides common node-related configuration
  cypress: cypress-io/cypress@1
  browser-tools: circleci/browser-tools@1.2.5
  oss-ci-cd-tooling: apollo/oss-ci-cd-tooling@0.0.20


version: 2.1 # using 2.1 provides access to orbs and other features
executors:
   node:
     docker:
       - image: cimg/node:16.13.0
   with-chrome:
    resource_class: small
    docker:
      - image: cypress/browsers:node14.16.0-chrome90-ff88
     

jobs:
  
  install-client-dependencies:
    executor:
      name: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-packaging-dependencies-{{ checksum "client/package-lock.json"}}
       
      - run:
          name: install_client_dependencies
          working_directory: client
          command: npm ci
        


      - save_cache:
          paths:
            - client/node_modules         
          key: v14-packaging-dependencies-{{ checksum "client/package-lock.json" }}
     


  unit-test:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - v14-packaging-dependencies-{{ checksum "client/package-lock.json" }}
      
      - run:
          name: unit-test
          working_directory: client
          command: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
  
      

  build:
    executor: node
    steps:
      - checkout
      - restore_cache:
           keys:
             - v14-packaging-dependencies-{{ checksum "client/package-lock.json"}}
      - run:
          name: build_front_end
          working_directory: client
          command: npm run build
      
      - persist_to_workspace:
          root: client
          paths:
            - dist/*

  
      

  deploy:
    docker:
      - image: google/cloud-sdk
    steps:
      - checkout
      - attach_workspace:
          at: client
      - restore_cache:
           keys:
             - v14-packaging-dependencies-{{ checksum "client/package-lock.json"}}
            
      - run:
          name: Set up and deploy gcloud config
          working_directory: client
          command: |
            echo ${GCLOUD_KEY} > /tmp/sa_key.json 
            gcloud auth activate-service-account --key-file=/tmp/sa_key.json
            rm /tmp/sa_key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}  
            gcloud --quiet app deploy --version=${CIRCLE_BRANCH} + "-client"


    
  deploy-server:
     docker:
      - image: google/cloud-sdk
     steps:
      - checkout
      - restore_cache:
           keys:
             - v14-packaging-dependencies-{{ checksum "client/package-lock.json"}}
            
      - run:
          name: Set up gcloud config
          command: |
            echo ${GCLOUD_KEY} > /tmp/sa_key.json 
            gcloud auth activate-service-account --key-file=/tmp/sa_key.json
            rm /tmp/sa_key.json
            gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
            gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}  

      - run:
          name: deploy-server
          working_directory: server
          command: gcloud app deploy --version=${CIRCLE_BRANCH}+"-server"
          


      
      

workflows:
  matrix-tests:
    jobs: 
      - install-client-dependencies
      - build: 
          requires:
            - install-client-dependencies
      - unit-test:
           requires:
              - install-client-dependencies

      - cypress/run:
         working_directory: client
         executor: with-chrome
         browser: chrome
         install-command: npm install apollo-angular @apollo/client graphql
         pre-steps: 
            - run: npm install -g concurrently
         yarn: false                 
         start: 
           npm run dev

      - deploy-server:
           requires:
             - install-client-dependencies
             - cypress/run

      - deploy:
            requires:
               - build
               - deploy-server
      
           

      
      
      
     
